/////////////////////////////////////////////
Object-Oriented(OO) = Object-based
(C++)class=(JS)object prototype
1.encapsulation
2.inheritance
3.pylymorphic

1.class and object
2.this
///////////////////////////////////////
var cat1=new cat();	//initialisation class, and cat1 s object
cat();			//function

ex:
function cat()
{
}
var cat1=new cat();
cat1.name="lisa";
cat1.age=23;
cat1.color="white";
document.writeln(cat1.name);

///////////////////////////////////////
class and object
1.using constructor to initialise class
function class_name()
{
	//body
}
var object_name=new class_name();

////////////////////////////////////
in JS,all are object;
ex:
var a=123;
document.writeln(a.constructor+"<br/>");	//number
var b="string";
document.writeln(b.constructor+"<br/>");	//string

/////////////////////////////////////
object call has two types
ex:
function person(){};
var p1=new person();
p1.name="Li Zhen";
document.writeln(p1.name+"<br/>");
document.writeln(p1["name"]+"<br/>");	//dynamic

////////////////////////////////////////
copy object 
var p2=p1;
p2.name="Zhen Li"; 			//changed in heap
document.writeln(p1.name+"<br/>");	//Zhen Li
document.writeln(p2.name+"<br/>");	//Zhen Li

//////////////////////////////////////////
free: delete in JS cannot delete object, only can delete member; 
p2=null;
document.writeln(p1.name+"<br/>");	//Li Zhen
document.writeln(p2.name+"<br/>");	//error
delete p2.name;	//cannot delte p2

///////////////////////////////////////////
this:only can use in class; if this used out of class, this will point another object.

ex:
function Person()
{
	this.name="aaabbbccc";
	this.age="27";
	this.abc=function()
	{
		window.alert(this.v);
	}
}

var p3=new Person();
var p4=new Person();
p3.v="hello";
p3.abc();	//output is hello
document.writeln(p3.name+p3.age+"<br/>");	//aaabbbccc 27
document.writeln(p4.name+p4.age+"<br/>");	//aaabbbccc 27

////////////////////////////////////////////

function person()
{	//private
	var name="abc";
	var age=900;
	//public
	this.name2="ab2";
}
var p1=new person();
document.writeln(p1.name);	//undefined, because name is private only can use in class
document.writeln(p1.name2);	//ab2

So, If you want to call the private member, you must use the member function
ex:

function Person1()
{
<!-- private member -->
	var name="abc";
	var age=900;
	<!-- public member -->
	this.name2="ab2";
	<!-- private member function -->
	function show2()
	{
		document.writeln(name+age);
	}
	<!-- public member function -->
	this.show=function()
	{
		document.writeln(name+age);
	}
}
var p5=new Person1();
document.writeln(p5.name2);
p5.show();

///////////////////////////////////////////////////
member function

function Person2(name, age)
{
<!-- public member -->
	this.name=name;
	this.age=age;
	<!-- public member function, the function name is show-->
	this.show=function()
	{
		document.writeln("name = "+this.name);
	}
}
var p6=new Person2("Li Zhen","27");
p6.show();

//////////////////////////////////////////////////////
all object can share the function
ex:

function Dog(){}
var dog1=new Dog();

Dog.prototype.shout=function()
{
	window.alert("one dog");
}
dog1.shout();
var dog2=new Dog();
dog2.shout();